#!/bin/bash

MAINDIR="/opt/terraria"
WORLDDIR="$MAINDIR/worlds"
SERVERDIR="$MAINDIR/server"
BACKUPDIR="$MAINDIR/backups"

error() {
  echo "$@" 1>&2
}

isworldrunning() {
  (screen -list | grep -q "terraria-$1") &>/dev/null
  return $?
}

isworldstarted() {
  if [[ `cat "$WORLDDIR/$1/screenlog.0" | grep '^: .*' | wc -l` -gt "0" && ! `cat "$WORLDDIR/$1/screenlog.0" | grep 'exit' | wc -l` -gt "0" ]]; then
    return 0
  fi
  return 1
}

getworlds() {
  if [ -z "$1" ]; then
    ls "$WORLDDIR" 2>/dev/null
  else
    echo "$1"
  fi
}

start() {
  if [ ! -d "$WORLDDIR/$1" ]; then
    error "World not found"
    return 1
  fi
  if isworldrunning "$1"; then
    error "World already running"
    return 0
  fi

  cd "$WORLDDIR/$1"
  rm -f "$WORLDDIR/$1"/screenlog.*
  if ! screen -L -dmS "terraria-$1" /bin/bash -c "\"$SERVERDIR/TerrariaServer.bin.x86_64\" -config \"$WORLDDIR/$1/serverconfig.txt\""; then
    error "Could not start server"
    cd "$MAINDIR"
    return 1
  fi
  cd "$MAINDIR"
  while ! isworldrunning "$1"; do
    sleep 1
  done
}

stop() {
  if ! isworldrunning "$1"; then
    error "World not running"
    return 0
  fi

  WAIT=0
  while ! isworldstarted "$1" && [[ -z $2 || $WAIT -le $2 ]]; do
    WAIT=$(($WAIT+1))
    sleep 1
  done
  if ! send "$1" "exit"; then
    error "Could not stop server"
    return 1
  fi
  WAIT=0
  while isworldrunning "$1" && [[ -z $2 || $WAIT -le $2 ]]; do
    WAIT=$(($WAIT+1))
    sleep 1
  done
}

forceStop() {
  TIMEOUT="16"
  stop "$1" "$TIMEOUT"
  sleep 1
  if isworldrunning; then
    echo "Quitting server screen"
    screen -XS "terraria-$1" quit
    WAIT=0
    while isworldrunning "$1" && [ $WAIT -le $TIMEOUT ]; do
      WAIT=$(($WAIT+1))
      sleep 1
    done
    echo "Killing server screen"
    screen -XS "terraria-$1" kill
    WAIT=0
    while isworldrunning "$1" && [ $WAIT -le $TIMEOUT ]; do
      WAIT=$(($WAIT+1))
      sleep 1
    done
  fi
}

backup() {
  if [ ! -d "$WORLDDIR/$1" ]; then
    error "World not found"
    return 1
  fi

  if isworldstarted "$1"; then
    if ! send "$1" "save"; then
      error "Could not save server"
      return 1
    fi
    sleep 5
  fi

  mkdir -p "$BACKUPDIR"
  if ! rdiff-backup --print-statistics "$WORLDDIR/$1" "$BACKUPDIR/$1" > "$WORLDDIR/$1/lastbackup.log"; then
    error "Could not backup server"
    return 1
  fi
  if ! rdiff-backup --remove-older-than 15D --force "$BACKUPDIR/$1" >> "$WORLDDIR/$1/lastbackup.log"; then
    error "Could not backup server"
    return 1
  fi
}

create() {
  if [ -e "$WORLDDIR/$1" ]; then
    error "World already exists"
    return 1
  fi

  mkdir -p "$WORLDDIR/$1"
  cp "$MAINDIR/defaultserverconfig.txt" "$WORLDDIR/$1/serverconfig.txt"
  sed -i "s|^\s*#*\s*\(world\s*=\s*\).*$|\1$WORLDDIR/$1/$1.wld|" "$WORLDDIR/$1/serverconfig.txt"
  sed -i "s|^\s*#*\s*\(worldpath\s*=\s*\).*$|\1$WORLDDIR/$1/|" "$WORLDDIR/$1/serverconfig.txt"
  sed -i "s|^\s*#*\s*\(worldname\s*=\s*\).*$|\1$1|" "$WORLDDIR/$1/serverconfig.txt"
  sed -i "s|^\s*#*\s*\(autocreate\s*=\s*\).*$|\1$2|" "$WORLDDIR/$1/serverconfig.txt"
  sed -i "s|^\s*#*\s*\(difficulty\s*=\s*\).*$|\1$3|" "$WORLDDIR/$1/serverconfig.txt"
  sed -i "s|^\s*#*\s*\(port\s*=\s*\).*$|\1$4|" "$WORLDDIR/$1/serverconfig.txt"
}

send() {
  if ! isworldstarted "$1"; then
    error "World not started"
    return 1
  fi

  if ! screen -S "terraria-$1" -X stuff "$2\r"; then
    error "Could not send command"
    return 1
  fi
}

attach() {
  if ! isworldrunning "$1"; then
    error "World not running"
    return 1
  fi

  script /dev/null -qc "screen -r \"terraria-$1\""
  return $?
}

update() {
  rm -rf "$SERVERDIR"
  DOWNLOAD=`curl -s "https://terraria.gamepedia.com/Server" | perl -pe 's/\n//' | sed 's|.*\(https*://terraria.org/server/.*\.zip\).*|\1|'`
  curl -so "$MAINDIR/server.zip" "$DOWNLOAD"
  unzip -q "$MAINDIR/server.zip" -d "$SERVERDIR.tmp"
  rm -f "$MAINDIR/server.zip"
  VERSIONFOLDER=`ls "$SERVERDIR.tmp"`
  mv "$SERVERDIR.tmp/$VERSIONFOLDER/Linux" "$SERVERDIR"
  rm -rf "$SERVERDIR.tmp"
  chmod +x "$SERVERDIR/TerrariaServer.bin.x86"
  chmod +x "$SERVERDIR/TerrariaServer.bin.x86_64"
}

case "$1" in

  start)
    for WORLD in `getworlds "$2"`; do
      echo "-- Starting world: $WORLD"
      start "$WORLD"
    done
  ;;

  stop)
    for WORLD in `getworlds "$2"`; do
      echo "-- Stopping world: $WORLD"
      stop "$WORLD"
    done
  ;;

  force-stop)
    for WORLD in `getworlds "$2"`; do
      echo "-- Stopping world: $WORLD"
      forceStop "$WORLD"
    done
  ;;

  restart)
    for WORLD in `getworlds "$2"`; do
      if "$0" stop "$WORLD"; then
        "$0" start "$WORLD"
      fi
    done
  ;;

  backup)
    for WORLD in `getworlds "$2"`; do
      echo "-- Backing up world: $WORLD"
      backup "$WORLD"
    done
  ;;

  send)
    if [ -z "$2" ]; then
      echo "Enter the world name to send to"
      exit 1
    fi
    if [ -z "$3" ]; then
      echo "Enter a command to send"
      exit 1
    fi

    echo "-- Sending '${*:3}' to '$2'"
    send "$2" "${*:3}"
  ;;

  attach)
    if [ -z "$2" ]; then
      echo "Enter the world name to attach to"
      exit 1
    fi

    echo "-- Attaching to '$2'"
    attach "$2"
  ;;

  create)
    if [ -z "$2" ]; then
      echo "Enter a name for the new world"
      exit 1
    fi
    if [[ "$3" != "1" && "$3" != "2" && "$3" != "3" ]]; then
      echo "Enter a valid size for the new world (1, 2, 3)"
      exit 1
    fi
    if [[ "$4" != "0" && "$4" != "1" ]]; then
      echo "Enter a valid difficulty for the new world (0, 1)"
      exit 1
    fi
    PORT="$5"
    if [ -z "$PORT" ]; then
      PORT="7777"
    fi

    echo "-- Creating world: $2"
    create "$2" "$3" "$4" "$PORT"
  ;;

  update)
    if "$0" force-stop; then
      echo "Updating server..."
      if update; then
        "$0" start
      fi
    fi
  ;;

esac
exit 0
